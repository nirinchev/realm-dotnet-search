using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Realm.Search.SourceGenerator
{
    internal class ClassCodeBuilder
    {
        private readonly string[] _defaultNamespaces = new string[]
        {
            "System",
            "MongoDB.Bson",
            "MongoDB.Bson.Serialization.Attributes",
            "Realms.Search",
        };

        private readonly ClassInfo _classInfo;

        public ClassCodeBuilder(ClassInfo classInfo)
        {
            _classInfo = classInfo;
        }

        public string GenerateSource()
        {
            var usings = GetUsings();

            var projectionString = GenerateProjection();

            var partialClassString = GeneratePartialClass(projectionString);

            return $@"// <auto-generated />
#nullable enable

{usings}

{partialClassString}
";
        }

        private string GetUsings()
        {
            var namespaces = new HashSet<string>(_defaultNamespaces);
            namespaces.UnionWith(_classInfo.Usings);

            if (!_classInfo.NamespaceInfo.IsGlobal)
            {
                namespaces.Add(_classInfo.NamespaceInfo.OriginalName);
            }

            return string.Join(Environment.NewLine, namespaces.Where(n => !string.IsNullOrWhiteSpace(n)).OrderBy(s => s).Select(s => $"using {s};"));
        }

        private string GeneratePartialClass(string projectionString)
        {
            var classString = $@"{SyntaxFacts.GetText(_classInfo.Accessibility)} partial class {_classInfo.Name} : ISearchModel<{_classInfo.Name}.Projection>
{{
    public static Projection DefaultProjection => Projection.Default;

    [BsonElement(""searchHighlights"")]
    public Highlight[]? SearchHighlights {{ get; set; }}

{projectionString.Indent()}
}}";

            foreach (var enclosingClass in _classInfo.EnclosingClasses)
            {
                classString = $@"{SyntaxFacts.GetText(enclosingClass.Accessibility)} partial class {enclosingClass.Name}
{{
{classString.Indent()}
}}";
            }

            if (!_classInfo.NamespaceInfo.IsGlobal)
            {
                classString = $@"namespace {_classInfo.NamespaceInfo.OriginalName}
{{
{classString.Indent()}
}}";
            }

            return classString;
        }

        private string GenerateProjection()
        {
            var propertiesSB = new StringBuilder();
            var defaultsSB = new StringBuilder();

            foreach (var property in _classInfo.Properties)
            {
                defaultsSB.AppendLine($"{property.Name} = true,");

                if (property.MapTo != null)
                {
                    propertiesSB.AppendLine($@"[BsonElement(""{property.MapTo}"")]");
                }

                propertiesSB.AppendLine("[BsonIgnoreIfDefault]");
                propertiesSB.AppendLine($@"public bool {property.Name} {{ get; set; }}");
            }

            return $@"public class Projection : ProjectionModel
{{
    public static Projection Default => new()
    {{
{defaultsSB.ToString().Indent(2, trimNewLines: true)}
    }};

    public static Projection NoId
    {{
        get
        {{
            var result = Default;
            result.ExtraExpressions = new()
            {{
                [""_id""] = false
            }};

            return result;
        }}
    }}

{propertiesSB.ToString().Indent(trimNewLines: true)}
}}";
        }
    }
}