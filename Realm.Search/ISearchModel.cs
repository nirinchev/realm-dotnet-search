using System;
using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Realm.Search;

namespace Realms.Search
{
    /// <summary>
    /// The base interface for all generated search models.
    /// </summary>
    /// <remarks>
    /// Classes that inherit from <see cref="ISearchModel"/> will be autogenerated by the
    /// Realm.Search generator.
    /// </remarks>
	public interface ISearchModel
	{
        /// <summary>
        /// The list of highlights if requested via <see cref="ProjectionModel.SearchHighlights"/>.
        /// </summary>
        Highlight[]? SearchHighlights { get; }
    }

    /// <summary>
    /// The base class for all generated projection models. This class will be implemented
    /// by the source generated classes and should not be used manually.
    /// </summary>
    public abstract class ProjectionModel
	{
        /// <summary>
        /// Whether to include the search highlights in the returned results. If a non-null value for <see cref="HighlightOptions"/> is
        /// passed to the search method, this will automatically be set to <c>true</c>.
        /// </summary>
        /// <value><c>true</c> to include the search highlights in the results; <c>false</c> otherwise.</value>
        [BsonIgnore]
        public bool SearchHighlights { get; set; }

        /// <summary>
        /// Whether to include the text score with the results. It must be used in conjunction with a $text query
        /// </summary>
        /// <value><c>true</c> to include the text score in the results; <c>false</c> otherwise.</value>
        /// <seealso href="https://www.mongodb.com/docs/manual/reference/operator/aggregation/meta/"/>
        [BsonIgnore]
        public bool TextScore { get; set; }

        /// <summary>
        /// Whether to include the search score with the results.
        /// </summary>
        /// <value><c>true</c> to include the search score in the results; <c>false</c> otherwise.</value>
        /// <seealso href="https://www.mongodb.com/docs/atlas/reference/full-text-search/scoring/"/>
        [BsonIgnore]
        public bool SearchScore { get; set; }

        /// <summary>
        /// Any additional expression to configure the projection pipeline with.
        /// </summary>
        /// <value>A document containing key-value pairs representing the extra projection expressions.</value>
        [BsonIgnore]
        public BsonDocument? ExtraExpressions { get; set; }

        internal BsonDocument Render()
		{
            var result = this.ToBsonDocument();
            result.Remove("_t");

            if (ExtraExpressions != null)
            {
                foreach (var kvp in ExtraExpressions)
                {
                    result[kvp.Name] = kvp.Value;
                }
            }

            if (SearchHighlights)
            {
                result["searchHighlights"] = new BsonDocument("$meta", "searchHighlights");
            }

            if (TextScore)
            {
                result["textScore"] = new BsonDocument("$meta", "textScore");
            }

            if (SearchScore)
            {
                result["searchScore"] = new BsonDocument("$meta", "searchScore");
            }

            return result;
        }
	}
}
